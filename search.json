[{"comment":"/**\r\n * Actions are for communication between components and services. For example, the login component uses action login to send information, which is an interface between the login component and the user login service.\r\n * @namespace Actions.action_auth\r\n */","name":"action_auth","kind":"namespace","longname":"Actions.action_auth","scope":"static","id":"action_auth","path":"Actions.action_auth.html","ancestors":[]},{"comment":"/**\r\n * This is creator for actions related to login user. We’re gonna import AuthService to make asynchronous HTTP requests with trigger one or more dispatch in the result.\r\n *\r\n *@property {function} login action creators return a Promise for Components using them. (Exp: login component)\r\n *@param {Object} data object of user data\r\n *@param {dispatch} dispatch dispatch LOGIN_SUCCESS and SET_MESSAGE if successful | dispatch LOGIN_FAIL and SET_MESSAGE if failed\r\n *@memberof Actions.action_auth\r\n * @returns {promises} - promises response of user login data\r\n */","name":"login","kind":"function","longname":"Actions.action_auth.login","scope":"static","id":".login","path":"Actions.action_auth.html#.login","ancestors":["<a href=\"Actions.action_auth.html\">.action_auth</a>."]},{"comment":"/**\r\n * This is creator for actions related to confirm password reset. We’re gonna import AuthService to make asynchronous HTTP requests with trigger one or more dispatch in the result.\r\n *\r\n *@property {function} pass_reset_confirm action creators return a Promise for Components using them. (Exp: resetpass component)\r\n *@param {Object} data object of user data\r\n *@param {dispatch} dispatch dispatch SET_MESSAGE if successful or failed\r\n *@memberof Actions.action_auth\r\n * @returns {promises} - promises response of user confrim reset pass data\r\n */","name":"pass_reset_confirm","kind":"function","longname":"Actions.action_auth.pass_reset_confirm","scope":"static","id":".pass_reset_confirm","path":"Actions.action_auth.html#.pass_reset_confirm","ancestors":["<a href=\"Actions.action_auth.html\">.action_auth</a>."]},{"comment":"/**\r\n * This is creator for actions related to authentication. We’re gonna import AuthService to make asynchronous HTTP requests with trigger one or more dispatch in the result.\r\n *\r\n *@property {function} register get data from register service and retrun promise of reponse (Exp: register component)\r\n *@param {Object} data object of user data\r\n *@param {dispatch} dispatch dispatch REGISTER_SUCCESS and SET_MESSAGE if successful | dispatch REGISTER_FAIL and SET_MESSAGE if failed\r\n *@memberof Actions.action_auth\r\n * @returns {promises} - promises response of user profile data\r\n */","name":"register","kind":"function","longname":"Actions.action_auth.register","scope":"static","id":".register","path":"Actions.action_auth.html#.register","ancestors":["<a href=\"Actions.action_auth.html\">.action_auth</a>."]},{"comment":"/**\r\n * This is creator for actions related to request password reset. We’re gonna import AuthService to make asynchronous HTTP requests with trigger one or more dispatch in the result.\r\n *\r\n *@property {function} request_pass_reset action creators return a Promise for Components using them. (Exp: requsetresetpass component)\r\n *@param {Object} data object of user data\r\n *@param {dispatch} dispatch dispatch RESET_PASS_SUCCESS and SET_MESSAGE if successful | dispatch RESET_PASS_FAIL and SET_MESSAGE if failed\r\n *@memberof Actions.action_auth\r\n * @returns {promises} - promises response of user requset reset pass data\r\n */","name":"request_pass_reset","kind":"function","longname":"Actions.action_auth.request_pass_reset","scope":"static","id":".request_pass_reset","path":"Actions.action_auth.html#.request_pass_reset","ancestors":["<a href=\"Actions.action_auth.html\">.action_auth</a>."]},{"comment":"/**\r\n * This Redux action creator is for actions related to messages (notifications) from APIs.\r\n * @namespace Actions.action_message\r\n */","name":"action_message","kind":"namespace","longname":"Actions.action_message","scope":"static","id":"action_message","path":"Actions.action_message.html","ancestors":[]},{"comment":"/**\r\n * set message from apis.\r\n *\r\n *@property {function} clearMessage clear message\r\n *@memberof Actions.action_message\r\n * @returns {Object} - object of message type\r\n * @example\r\n * {\r\n * type:\"CLEAR_MESSAGE\"\r\n * }\r\n */","name":"clearMessage","kind":"function","longname":"Actions.action_message.clearMessage","scope":"static","id":".clearMessage","path":"Actions.action_message.html#.clearMessage","ancestors":["<a href=\"Actions.action_message.html\">.action_message</a>."]},{"comment":"/**\r\n * set message from apis.\r\n *\r\n *@property {function} setMessage set message for actions related\r\n *@param {string} message message text\r\n *@memberof Actions.action_message\r\n * @returns {Object} - object of message type and message text as payload\r\n *  @example\r\n * {\r\n * type:\"SET_MESSAGE\"\r\n * payload:\"OK\"\r\n * }\r\n \r\n */","name":"setMessage","kind":"function","longname":"Actions.action_message.setMessage","scope":"static","id":".setMessage","path":"Actions.action_message.html#.setMessage","ancestors":["<a href=\"Actions.action_message.html\">.action_message</a>."]},{"comment":"/**\r\n * some string constant that indicates the type of action being performed.\r\n * @namespace Actions.action_type\r\n */","name":"action_type","kind":"namespace","longname":"Actions.action_type","scope":"static","id":"action_type","path":"Actions.action_type.html","ancestors":[]},{"comment":"/**\r\n * retrun CLEAR_MESSAGE  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.CLEAR_MESSAGE","kind":"member","longname":"Actions.action_type.exports.CLEAR_MESSAGE","scope":"static","id":".exports.CLEAR_MESSAGE","path":"Actions.action_type.html#.exports.CLEAR_MESSAGE","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun LOGIN_FAIL  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.LOGIN_FAIL","kind":"member","longname":"Actions.action_type.exports.LOGIN_FAIL","scope":"static","id":".exports.LOGIN_FAIL","path":"Actions.action_type.html#.exports.LOGIN_FAIL","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun LOGIN_SUCCESS  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.LOGIN_SUCCESS","kind":"member","longname":"Actions.action_type.exports.LOGIN_SUCCESS","scope":"static","id":".exports.LOGIN_SUCCESS","path":"Actions.action_type.html#.exports.LOGIN_SUCCESS","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun LOGOUT  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.LOGOUT","kind":"member","longname":"Actions.action_type.exports.LOGOUT","scope":"static","id":".exports.LOGOUT","path":"Actions.action_type.html#.exports.LOGOUT","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun REGISTER_FAIL  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.REGISTER_FAIL","kind":"member","longname":"Actions.action_type.exports.REGISTER_FAIL","scope":"static","id":".exports.REGISTER_FAIL","path":"Actions.action_type.html#.exports.REGISTER_FAIL","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun REGISTER_SUCCESS  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.REGISTER_SUCCESS","kind":"member","longname":"Actions.action_type.exports.REGISTER_SUCCESS","scope":"static","id":".exports.REGISTER_SUCCESS","path":"Actions.action_type.html#.exports.REGISTER_SUCCESS","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun RESET_PASS_FAIL  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.RESET_PASS_FAIL","kind":"member","longname":"Actions.action_type.exports.RESET_PASS_FAIL","scope":"static","id":".exports.RESET_PASS_FAIL","path":"Actions.action_type.html#.exports.RESET_PASS_FAIL","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun RESET_PASS_SUCCESS  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.RESET_PASS_SUCCESS","kind":"member","longname":"Actions.action_type.exports.RESET_PASS_SUCCESS","scope":"static","id":".exports.RESET_PASS_SUCCESS","path":"Actions.action_type.html#.exports.RESET_PASS_SUCCESS","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * retrun SET_MESSAGE  string\r\n *@memberof Actions.action_type\r\n @type {string}\r\n */","name":"exports.SET_MESSAGE","kind":"member","longname":"Actions.action_type.exports.SET_MESSAGE","scope":"static","id":".exports.SET_MESSAGE","path":"Actions.action_type.html#.exports.SET_MESSAGE","ancestors":["<a href=\"Actions.action_type.html\">.action_type</a>."]},{"comment":"/**\r\n * Api domain url\r\n * @name BACKEND_URL\r\n * @type {string}\r\n * @example\r\n * // http://localhost:8000/\r\n */","name":"BACKEND_URL","kind":"member","longname":"BACKEND_URL","scope":"global","id":"BACKEND_URL","path":"global.html#BACKEND_URL","ancestors":[]},{"comment":"/**\r\n * get array of countries data\r\n * @name helper\r\n * @namespace helper.country\r\n */","name":"country","kind":"namespace","longname":"helper.country","scope":"static","id":"country","path":"helper.country.html","ancestors":[]},{"comment":"/**\r\n *  countries data.\r\n *\r\n *@type {Array<Object>} array of countrires data\r\n *@memberof helper.country\r\n *@example\r\n *{\r\n    value: \"Anguilla\",\r\n    label: \"Anguilla\",\r\n    abbreviation: \"AI\",\r\n  }\r\n */","name":"country","kind":"member","longname":"helper.country.country","scope":"static","id":".country","path":"helper.country.html#.country","ancestors":["<a href=\"helper.country.html\">.country</a>."]},{"comment":"/**\r\n * get array of countries data\r\n * @name helper\r\n * @namespace helper.formatDate\r\n */","name":"formatDate","kind":"namespace","longname":"helper.formatDate","scope":"static","id":"formatDate","path":"helper.formatDate.html","ancestors":[]},{"comment":"/**\r\n * A function for formatting a date to MMddyy\r\n *@property {function}  formatDate change format of date\r\n * @param {Date} d -Date type\r\n * @param {string} seperator -date formater seperator\r\n * @memberof helper.formatDate\r\n * @returns {string} return data by special format (Exp:mm/dd/YY)\r\n * @example\r\n * formatDate(new Date(), \"/\")\r\n * return 12/11/22\r\n * @example\r\n * formatDate(new Date(), \"-\")\r\n * return 12-11-22\r\n */","name":"formatDate","kind":"function","longname":"helper.formatDate.formatDate","scope":"static","id":".formatDate","path":"helper.formatDate.html#.formatDate","ancestors":["<a href=\"helper.formatDate.html\">.formatDate</a>."]},{"comment":"/**\r\n * set rate for blog post article(star rating)\r\n * @name helper\r\n * @namespace helper.StarRating\r\n */","name":"StarRating","kind":"namespace","longname":"helper.StarRating","scope":"static","id":"StarRating","path":"helper.StarRating.html","ancestors":[]},{"comment":"/**\r\n * set title for pages.\r\n *\r\n *@property {function} StarRating set points for article\r\n *@param {string} number The number of points (stars) of an article\r\n *@memberof helper.StarRating\r\n * @returns {React.Component} -return react compoent of article point\r\n */","name":"StarRating","kind":"function","longname":"helper.StarRating.StarRating","scope":"static","id":".StarRating","path":"helper.StarRating.html#.StarRating","ancestors":["<a href=\"helper.StarRating.html\">.StarRating</a>."]},{"comment":"/**\r\n * Change routes Title by use effect hook\r\n * @name helper\r\n * @namespace helper.useTitle\r\n */","name":"useTitle","kind":"namespace","longname":"helper.useTitle","scope":"static","id":"useTitle","path":"helper.useTitle.html","ancestors":[]},{"comment":"/**\r\n * set title for pages.\r\n *\r\n *@property {function} useTitle set title for routes\r\n *@param {string} title title text\r\n *@memberof helper.useTitle\r\n * @returns {Function} -change title tag node text\r\n */","name":"useTitle","kind":"function","longname":"helper.useTitle.useTitle","scope":"static","id":".useTitle","path":"helper.useTitle.html#.useTitle","ancestors":["<a href=\"helper.useTitle.html\">.useTitle</a>."]},{"comment":"/**\r\n * retrun object for sending as axios header\r\n *  @module authHeader\r\n */","name":"authHeader","kind":"module","longname":"module:authHeader","id":"authHeader","path":"module-authHeader.html","ancestors":[]},{"comment":"/**\r\n * retrun object for all auth services such as register,login,logout,requestpasswordreset,passwordresetconfirm\r\n *  @module authservices\r\n */","name":"authservices","kind":"module","longname":"module:authservices","id":"authservices","path":"module-authservices.html","ancestors":[]},{"comment":"/**\r\n * retrun object for all auth services such as getProfile,editProfileUserInfo,editProfileProfileInfo\r\n *  @module userservices\r\n */","name":"userservices","kind":"module","longname":"module:userservices","id":"userservices","path":"module-userservices.html","ancestors":[]},{"kind":"package","longname":"package:undefined","id":"package:","path":"global.html#package:","ancestors":[]},{"comment":"/**\r\n * return header object with content type of form\r\n * @name PublicHeaderConfig\r\n * @type {Object}\r\n * @example\r\n * //  headers: {\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  }\r\n */","name":"PublicHeaderConfig","kind":"member","longname":"PublicHeaderConfig","scope":"global","id":"PublicHeaderConfig","path":"global.html#PublicHeaderConfig","ancestors":[]},{"comment":"/**\r\n * The Auth reducer will update the isLoggedIn and user state of the application.\r\n * @namespace Reducer.auth_reducer\r\n */","name":"auth_reducer","kind":"namespace","longname":"Reducer.auth_reducer","scope":"static","id":"auth_reducer","path":"Reducer.auth_reducer.html","ancestors":[]},{"comment":"/**\r\n * @type {Object}\r\n * @memberof Reducer.auth_reducer\r\n * @name initialState\r\n */","name":"initialState","kind":"member","longname":"Reducer.auth_reducer.initialState","scope":"static","id":".initialState","path":"Reducer.auth_reducer.html#.initialState","ancestors":["<a href=\"Reducer.auth_reducer.html\">.auth_reducer</a>."]},{"comment":"/**\r\n * The Auth reducer\r\n * @param {Object} state -initial user state (if localstorage user object exist {isLoggedIn:true,user} else  {isLoggedIn:true,user:null})\r\n * @module auth_reducer\r\n * @param {Object<type:string,payload:object|string>} action -action type and payload\r\n * @memberof Reducer.auth_reducer\r\n * @returns {Object} switch type with diffrent cases action and return user login data\r\n */","name":"auth_reducer","kind":"module","longname":"Reducer.auth_reducer.module:auth_reducer","scope":"static","id":"auth_reducer","path":"Reducer.auth_reducer.module_auth_reducer.html","ancestors":["<a href=\"Reducer.auth_reducer.html\">.auth_reducer</a>."]},{"comment":"/**\r\n * @type {Object} -user token object from local storage\r\n * @memberof Reducer.auth_reducer\r\n * @name user\r\n */","name":"user","kind":"member","longname":"Reducer.auth_reducer.user","scope":"static","id":".user","path":"Reducer.auth_reducer.html#.user","ancestors":["<a href=\"Reducer.auth_reducer.html\">.auth_reducer</a>."]},{"comment":"/**\r\n * we only have a single store in a Redux application. We use reducer composition instead of many stores to split data handling logic.\r\n * @namespace Reducer.combine_reducer\r\n */","name":"combine_reducer","kind":"namespace","longname":"Reducer.combine_reducer","scope":"static","id":"combine_reducer","path":"Reducer.combine_reducer.html","ancestors":[]},{"comment":"/**\r\n * The Auth reducer will update the isLoggedIn and user state of the application.\r\n * @namespace Reducer.message_reducer\r\n */","name":"message_reducer","kind":"namespace","longname":"Reducer.message_reducer","scope":"static","id":"message_reducer","path":"Reducer.message_reducer.html","ancestors":[]},{"comment":"/**\r\n * The message reducer\r\n * @module message_reducer\r\n * @param {Object} state -initial state\r\n * @param {Object<type:string,payload:object|string>} action -action type and payload\r\n * @memberof Reducer.message_reducer\r\n * @returns {Object} switch type of diffrent messages action and return objct of meesage\r\n */","name":"message_reducer","kind":"module","longname":"Reducer.message_reducer.module:message_reducer","scope":"static","id":"message_reducer","path":"Reducer.message_reducer.module_message_reducer.html","ancestors":["<a href=\"Reducer.message_reducer.html\">.message_reducer</a>."]},{"comment":"/**\r\n * retrun object for sending as axios header\r\n * @namespace Services.auth_Header\r\n */","name":"auth_Header","kind":"namespace","longname":"Services.auth_Header","scope":"static","id":"auth_Header","path":"Services.auth_Header.html","ancestors":[]},{"comment":"/**\r\n *retrun object for sending as axios header\r\n *@property {function} authHeader retrun header object\r\n *@memberof Services.auth_Header\r\n * @example\r\n * // returns { Authorization: \"token b62264436ae5a4b180b09773f5d9d0b4b39b0299\"}-if user logged in\r\n * @example\r\n * // returns {} -if user not logged in\r\n * @returns {Object} - header Object for axios\r\n */","name":"authHeader","kind":"function","longname":"Services.auth_Header.authHeader","scope":"static","id":".authHeader","path":"Services.auth_Header.html#.authHeader","ancestors":["<a href=\"Services.auth_Header.html\">.auth_Header</a>."]},{"comment":"/**\r\n   * get user json from localstorage\r\n   * @member {object}\r\n   * @inner\r\n   */","name":"user","kind":"member","longname":"Services.auth_Header.authHeader~user","scope":"inner","id":"~user","path":"Services.auth_Header.html#.authHeader#~user","ancestors":["<a href=\"Services.auth_Header.html\">.auth_Header</a>","<a href=\"Services.auth_Header.html#.authHeader\">.authHeader</a>~"]},{"comment":"/**\r\n * This section is related to registration and login and logout services as well as user password reset request\r\n * @namespace Services.auth_service\r\n */","name":"auth_service","kind":"namespace","longname":"Services.auth_service","scope":"static","id":"auth_service","path":"Services.auth_service.html","ancestors":[]},{"comment":"/**\r\n *post data to '/login/' and retrun promise(token)\r\n *@property {function} login login user service\r\n *@param {Object} data object of user array({\r\n    email: \"*\",\r\n    password:\"*\"\r\n  })\r\n  *@memberof Services.auth_service\r\n * @returns {promises} - promises response of login request\r\n */","name":"login","kind":"function","longname":"Services.auth_service.login","scope":"static","id":".login","path":"Services.auth_service.html#.login","ancestors":["<a href=\"Services.auth_service.html\">.auth_service</a>."]},{"comment":"/**\r\n *post data to '/logout/' with auth-header object and after  receive success status delete user object form local storage\r\n *@property {function} logout logout user service\r\n *@memberof Services.auth_service\r\n * @returns {promises} - promises response of logout\r\n */","name":"logout","kind":"function","longname":"Services.auth_service.logout","scope":"static","id":".logout","path":"Services.auth_service.html#.logout","ancestors":["<a href=\"Services.auth_service.html\">.auth_service</a>."]},{"comment":"/**\r\n *post data to '/password_reset/confirm/' and retrun promise\r\n *@property {function} passwordresetconfirm send for reset password service\r\n *@param {Object} data object of user array({\r\n    paswword: \"*\",\r\n    token:\"*\"\r\n  })\r\n  *@memberof Services.auth_service\r\n * @returns {promises} - promises response of confirm password reset\r\n */","name":"passwordresetconfirm","kind":"function","longname":"Services.auth_service.passwordresetconfirm","scope":"static","id":".passwordresetconfirm","path":"Services.auth_service.html#.passwordresetconfirm","ancestors":["<a href=\"Services.auth_service.html\">.auth_service</a>."]},{"comment":"/**\r\n *post data to '/signup/' and retrun promise\r\n *@property {function} register Sign up new user service\r\n *@param {Object} data object of user array({\r\n    email: \"*\",\r\n    first_name: \"*\",\r\n    last_name: \"*\",\r\n    password: \"*\",\r\n    repeat_password: \"*\",\r\n  })\r\n  *@memberof Services.auth_service\r\n * @returns {promises} - promises response of signup user\r\n */","name":"register","kind":"function","longname":"Services.auth_service.register","scope":"static","id":".register","path":"Services.auth_service.html#.register","ancestors":["<a href=\"Services.auth_service.html\">.auth_service</a>."]},{"comment":"/**\r\n *post data to '/password_reset/' and retrun promise\r\n *@property {function} requestpasswordreset request for reset password service\r\n *@param {Object} data object of user array({\r\n    email: \"*\",\r\n  })\r\n  *@memberof Services.auth_service\r\n * @returns {promises} -promises response of request password reset \r\n */","name":"requestpasswordreset","kind":"function","longname":"Services.auth_service.requestpasswordreset","scope":"static","id":".requestpasswordreset","path":"Services.auth_service.html#.requestpasswordreset","ancestors":["<a href=\"Services.auth_service.html\">.auth_service</a>."]},{"comment":"/**\r\n * This section is related to user services such as receiving profile information or changes in the profile section\r\n * @namespace Services.user_services\r\n */","name":"user_services","kind":"namespace","longname":"Services.user_services","scope":"static","id":"user_services","path":"Services.user_services.html","ancestors":[]},{"comment":"/**\r\n *send bloodTest And healthy information data with put action and '/profile/' url with axios(with auth-header()) and retrun promise\r\n *@property {function} editProfileProfileInfo edit user profile bloodTest and healthy information data service\r\n *@param {Object} data object of user bloodTest And healthy information\r\n *@memberof Services.user_services\r\n * @returns {promises} - promises response of edit profile data\r\n */","name":"editProfileProfileInfo","kind":"function","longname":"Services.user_services.editProfileProfileInfo","scope":"static","id":".editProfileProfileInfo","path":"Services.user_services.html#.editProfileProfileInfo","ancestors":["<a href=\"Services.user_services.html\">.user_services</a>."]},{"comment":"/**\r\n *put data to '/userinfo/' with axios(with auth-header()) and retrun promise\r\n *@property {function} editProfileUserInfo edit user profile data service\r\n  *@param {Object} data object of user data({\r\n    email: \"*\",\r\n    first_name: \"*\",\r\n    last_name: \"*\",\r\n    city: \"*\",\r\n    birthday: \"*\",\r\n    ...\r\n  })\r\n *@memberof Services.user_services\r\n * @returns {promises} - promises response of edit profile data\r\n */","name":"editProfileUserInfo","kind":"function","longname":"Services.user_services.editProfileUserInfo","scope":"static","id":".editProfileUserInfo","path":"Services.user_services.html#.editProfileUserInfo","ancestors":["<a href=\"Services.user_services.html\">.user_services</a>."]},{"comment":"/**\r\n *get data from '/profile/' with axios(with auth-header()) and retrun promise\r\n *@property {function} getProfile get user profile data service\r\n *@memberof Services.user_services\r\n * @returns {promises} - promises response of user profile data\r\n */","name":"getProfile","kind":"function","longname":"Services.user_services.getProfile","scope":"static","id":".getProfile","path":"Services.user_services.html#.getProfile","ancestors":["<a href=\"Services.user_services.html\">.user_services</a>."]}]